public class StructureProgramming {
    /*
    // -----------------------------------------------------------------------
    // Создание функции (метода)
    // -----------------------------------------------------------------------
    [public/private/protected] static <type> <name>(<argument_list>) {
        <body>
    }

    <type> - это тип функции. Он определяет, какого типа значение получается
             в результате работы функции.
    <name> - это имя функции. Может состоять из букв латинского алфавита,
             цифр и символа _. Регистр букв играет роль, цифра не может
             стоять на первом месте.
    <argument_list> - <empty_list>
                      <non_empty_list>
    <non_empty_list> - <arg_type> <arg_name>
                       <arg_type> <arg_name>, <non_empty_list>
    <empty_list> - пустой список аргументов
    <arg_type> - тип аргумента
    <arg_name> - имя аргумента

    <body> - полезный код функции (по ситу - то, что она делает).
             Аргументы м. б. использованы как локальные переменные.
             Все ветви кода функции должны заканчиваться оператором
             return <expr>;
             где <expr> - выражение типа <type> (за исключением ситуаций,
             когда <type> - void)
             return сразу завершает работу функции, возвращаяя в вызывающий
             код соответствующее значение.
             Если функция void, то она может содержать return без <expr>.
             В таком случае он служит для принудительного завершения функции.

    // =======================================================================

    // -----------------------------------------------------------------------
    // Вызов функции (метода)
    // -----------------------------------------------------------------------
    <name>(<data_list>);
    <data_list> - список фактических данных соответствующих типов, которые
                  будут скопированы в аргументы функции и использованы в
                  процессе ее работы.
    */

    static void byValue(int value) {
        value += 10;
    }
    static void byReference(int[] values) {
        values[0] += 10;
    }

    static void byReference(Integer value) {
        value = 10;
    }

    public static void main(String[] args) {
        int v1 = 0;
        int[] v2 = {0};
        Integer v3 = 0;

        byValue(v1);
        byReference(v2);
        byReference(v3);

        System.out.println(v1);
        System.out.println(v2[0]);
        System.out.println(v3);
    }
}
